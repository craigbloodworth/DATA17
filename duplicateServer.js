// This is a server and workbook checking service which will look for
// new or updated workbooks, handle their sync across to a different
// Tableau Server, and report all actions via a web console

const express = require('express');
var port = process.env.PORT || 3001;
var http = require('http'),
    app = express();
var io = require('socket.io')(require('http').Server(app));
var dateFormat = require('dateformat');

// duplicate.js contains all REST API calls generated by TabCommunicate
var duplicate = require('./duplicateServer/duplicate');

// Declare variables to hold the two servers' credentials
var serverA = serverB = {};

// Initialise service (login to the two servers), store server
// credentials and start checking for updates
duplicate.init(function(a, b) {
  serverA = a;
  serverB = b;
  checkForUpdates("", "");
});

// URL GET endpoint used to check process is running & keep alive
app.use('/healthcheck',function(req, res) {
  res.send('Healthy');
});

// Direct all other requests to the public HTML folder
// named 'duplicateClient'
app.use(express.static('duplicateClient'));

// Create the HTTP Server
var server = http.createServer(app).listen(port, function() {
  console.log("Listening on http://127.0.0.1:"+port);
});

// Initialise the Socket.IO listener for client web
// app communication
io = io.listen(server);

// When a a user logs into the web app return information
// about each server logged in by duplicate.init()
io.sockets.on("connection", function(socket) {
  socket.send({
    'status': 'Logged In',
    'serverA' : serverA,
    'serverB' : serverB
  });
});

// Send Status Update function takes in the status type,
// the server to which it belongs and the message and
// prefixes with the current time
var sendStatusUpdate = function(type, server, message) {
  var now = new Date();
  io.emit(type, {
    server: server,
    message: dateFormat("longTime") + " - " + message
  });
}

// The bulk of the work in this script is done by the Check For updates
// function. It follows these scenarios:
// - Is it the first time it's been run?
// - There's a new workbook on server A which needs copying to server B
// - There's a new workbook on server B which needs copying to server A
// - There are no new workbooks on either servers
// All scenarios once complete pause for 30 seconds before the function repeats
var checkForUpdates = function(previousA, previousB) {
  var latestA = latestB = "";

  // Start by getting the last updated workbook from each server
  duplicate.checkWorkbooks(serverA, function(workbookA){
    sendStatusUpdate('checkWorkbooks', 'A', 'Checking for new/updated workbooks');
    latestA = workbookA;
    duplicate.checkWorkbooks(serverB, function(workbookB){
      sendStatusUpdate('checkWorkbooks', 'B', 'Checking for new/updated workbooks');
      latestB = workbookB;

      // Is this the first time the function has been run? If so previousA and
      // previousB will both be blank strings
      if (previousA == "" && previousB == "") {

        // Return a message to the console that the sync service has started
        sendStatusUpdate('checkWorkbooks', 'A', 'Sync Service Initialised');
        sendStatusUpdate('checkWorkbooks', 'B', 'Sync Service Initialised');

        // Wait 30 sec before checking for workbook updates
        setTimeout(function() {
          checkForUpdates(latestA, latestB);
        }, 30000)

      // There's a new workbook on Server A. It should now be copied to Server B
      } else if (JSON.stringify(previousA) != JSON.stringify(latestA)) {

        // Update the console to indicate that a new workbook has been detected
        if (serverA.contentUrl == '') {
          sendStatusUpdate('checkWorkbooks', 'A', 'New/Updated workbook found (<a href="'+serverA.url+'/workbooks/'+latestA[0].contentUrl+'" target="_blank">'+ latestA[0].name +'</a>)');
        } else {
          sendStatusUpdate('checkWorkbooks', 'A', 'New/Updated workbook found (<a href="'+serverA.url+'/t/'+serverA.contentUrl+'/workbooks/'+latestA[0].contentUrl+'" target="_blank">'+ latestA[0].name +'</a>)');
        }

        // Copy the workbook from Server A to Server B
        duplicate.transferWorkbook(serverA, serverB, latestA[0], function(savedWorkbook) {

          // Report to the console that the workbook has been copied
          var latestWorkbook = savedWorkbook.workbook;
          if (serverB.contentUrl == '') {
            sendStatusUpdate('checkWorkbooks', 'B', 'Workbook <a href="'+serverB.url+'/workbooks/'+latestWorkbook.contentUrl+'" target="_blank">'+latestWorkbook .name+'</a> received');
          } else {
            sendStatusUpdate('checkWorkbooks', 'B', 'Workbook <a href="'+serverB.url+'/t/'+serverB.contentUrl+'/workbooks/'+latestWorkbook.contentUrl+'" target="_blank">'+latestWorkbook .name+'</a> received');
          }
          sendStatusUpdate('checkWorkbooks', 'A', 'Workbook transfer complete');

          // Remove the views key so that the structure of the workbook object matches
          // what's returned by the Get Workbooks for Site API endpoint
          delete latestWorkbook.views;

          // Add the workbook object to an array to that the structure matches the API
          latestB = [latestWorkbook];

          // Wait 30 sec before checking for workbook updates
          setTimeout(function() {
            checkForUpdates(latestA, latestB);
          }, 30000)
        });

      //  There's a new workbook on Server B. It should now be copied to Server A
      } else if (JSON.stringify(previousB) != JSON.stringify(latestB)) {

        // Update the console to indicate that a new workbook has been detected
        sendStatusUpdate('checkWorkbooks', 'B', 'New/Updated workbook found (<a href="'+serverB.url+'/t/'+serverB.contentUrl+'/workbooks/'+latestB[0].contentUrl+'" target="_blank">'+ latestB[0].name +'</a>)');

        // Copy the workbook from Server B to Server A
        duplicate.transferWorkbook(serverB, serverA, latestB[0], function(savedWorkbook) {

          // Report to the console that the workbook has been copied
          var latestWorkbook = savedWorkbook.workbook;
          sendStatusUpdate('checkWorkbooks', 'A', 'Workbook <a href="'+serverA.url+'/t/'+serverA.contentUrl+'/workbooks/'+latestWorkbook.contentUrl+'" target="_blank">'+latestWorkbook.name+'</a> received');
          sendStatusUpdate('checkWorkbooks', 'B', 'Workbook transfer complete');

          // Remove the views key so that the structure of the workbook object matches
          // what's returned by the Get Workbooks for Site API endpoint
          delete latestWorkbook.views;

          // Add the workbook object to an array to that the structure matches the API
          latestA = [latestWorkbook];

          // Wait 30 sec before checking for workbook updates
          setTimeout(function() {
            checkForUpdates(latestA, latestB);
          }, 30000)
        });

      // There are no workbook updates on either servers
      } else {

        // Update the console to show no workbook updates detected
        sendStatusUpdate('checkWorkbooks', 'A', 'No new or updated workbooks');
        sendStatusUpdate('checkWorkbooks', 'B', 'No new or updated workbooks');

        // Wait 30 sec before checking for workbook updates
        setTimeout(function() {
          checkForUpdates(latestA, latestB);
        }, 30000)
      }
    });
  });
}
